name: Deploy Static Files to Shared Hosting

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, openssl, tokenizer, json, curl, zip
        tools: composer:v2
        
    - name: Install Node.js dependencies
      run: npm ci
      
    - name: Build frontend assets
      run: npm run build
      
    - name: Install PHP dependencies
      run: composer install --no-dev --optimize-autoloader
      
    - name: Create deployment package
      run: |
        DEPLOY_DIR="deploy-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$DEPLOY_DIR"
        
        # Copy production files
        cp -r public "$DEPLOY_DIR/"
        cp -r src "$DEPLOY_DIR/"
        # cp -r database "$DEPLOY_DIR/"
        cp composer.json "$DEPLOY_DIR/"
        cp package.json "$DEPLOY_DIR/"
        # cp README.md "$DEPLOY_DIR/"
        cp env.example "$DEPLOY_DIR/"
        
        # Remove development files
        rm -rf "$DEPLOY_DIR/public/assets/dist/node_modules" || true
        rm -rf "$DEPLOY_DIR/public/assets/dist/.git" || true
        
        # Create deployment archive
        tar -czf "${DEPLOY_DIR}.tar.gz" "$DEPLOY_DIR"
        echo "DEPLOY_PACKAGE=${DEPLOY_DIR}.tar.gz" >> $GITHUB_ENV
        echo "DEPLOY_DIR=$DEPLOY_DIR" >> $GITHUB_ENV
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v4
      with:
        name: deployment-package
        path: ${{ env.DEPLOY_PACKAGE }}
        
    - name: Download deployment package
      uses: actions/download-artifact@v4
      with:
        name: deployment-package
        path: ./
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.DELIVERY_SSH_PRIVATE_KEY }}
        
    - name: Transfer deployment package
      run: |
        # Transfer the deployment package to the server
        scp -o StrictHostKeyChecking=no ${{ env.DEPLOY_PACKAGE }} ${{ secrets.DELIVERY_REMOTE_USER }}@${{ secrets.DELIVERY_REMOTE_HOST }}:/tmp/
        
    - name: Deploy to shared hosting
      uses: appleboy/ssh-action@v1.2.2
      with:
        host: ${{ secrets.DELIVERY_REMOTE_HOST }}
        username: ${{ secrets.DELIVERY_REMOTE_USER }}
        key: ${{ secrets.DELIVERY_SSH_PRIVATE_KEY }}
        port: ${{ secrets.DELIVERY_SSH_PORT || 22 }}
        script: |
          # Configuration
          REMOTE_PATH="${{ secrets.DELIVERY_REMOTE_PATH || '/public_html/delivery-game' }}"
          BACKUP_PATH="${{ secrets.DELIVERY_BACKUP_PATH || '/public_html/backups' }}"
          
          # Create backup of current deployment
          echo "Creating backup..."
          mkdir -p $BACKUP_PATH
          if [ -d $REMOTE_PATH ]; then
            tar -czf $BACKUP_PATH/delivery-game-backup-$(date +%Y%m%d-%H%M%S).tar.gz -C $REMOTE_PATH .
          fi
          
          # Remove old deployment
          rm -rf $REMOTE_PATH
          
          # Create new deployment directory
          mkdir -p $REMOTE_PATH
          
          # Extract new deployment
          tar -xzf /tmp/${{ env.DEPLOY_PACKAGE }} -C /tmp/
          cp -r /tmp/${{ env.DEPLOY_DIR }}/* $REMOTE_PATH/
          
          # Set up environment file from secrets
          cd $REMOTE_PATH
          cat > .env << 'EOF'
          DB_HOST=${{ secrets.DELIVERY_DB_HOST }}
          DB_NAME=${{ secrets.DELIVERY_DB_NAME }}
          DB_USER=${{ secrets.DELIVERY_DB_USER }}
          DB_PASS=${{ secrets.DELIVERY_DB_PASS }}
          APP_ENV=production
          APP_DEBUG=false
          EOF
          
          # Install PHP dependencies
          composer install --no-dev --optimize-autoloader
          
          # Set permissions (no sudo needed for shared hosting)
          chmod -R 755 $REMOTE_PATH
          chmod -R 775 $REMOTE_PATH/database
          
          # Clean up
          rm /tmp/${{ env.DEPLOY_PACKAGE }} || true
          rm -rf /tmp/${{ env.DEPLOY_DIR }} || true
          
          echo "Deployment completed successfully!"
          
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment completed successfully!"
          echo "Your game is now available at: http://${{ secrets.DELIVERY_REMOTE_URL }}"
        else
          echo "❌ Deployment failed!"
        fi 